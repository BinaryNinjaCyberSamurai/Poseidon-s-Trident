import logging
from typing import List, Dict, Any

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')


class VulnerabilityAssessment:
    """
    Manages a collection of vulnerability assessment modules, executes them,
    and aggregates their results.
    """
    def __init__(self):
        self.modules: List[Any] = []

    def add_module(self, module: Any) -> None:
        """
        Add a vulnerability assessment module.

        Args:
            module: An object with a run(system) method.
        """
        self.modules.append(module)

    def assess(self, system: str) -> List[Dict[str, Any]]:
        """
        Run all assessment modules on the given system.

        Args:
            system: Target system identifier (e.g., hostname or IP).

        Returns:
            List of results from each module.
        """
        results = []
        for module in self.modules:
            try:
                assessment_result = module.run(system)
                results.append({
                    "module": type(module).__name__,
                    "findings": assessment_result
                })
                logging.info(f"{type(module).__name__} completed successfully.")
            except Exception as e:
                logging.error(f"Error in {type(module).__name__}: {str(e)}")
                results.append({
                    "module": type(module).__name__,
                    "findings": [],
                    "error": str(e)
                })
        return results


class NmapScanner:
    """
    Simulates an Nmap vulnerability scan.
    Replace placeholder logic with actual Nmap integration for production.
    """
    def run(self, system: str) -> List[Dict[str, str]]:
        # Placeholder: Simulated assessment result
        vulnerabilities_found = [
            {"name": "Open port 22 (SSH)", "severity": "High"},
            {"name": "Outdated Apache version", "severity": "Medium"},
            # Add more findings here...
        ]
        return vulnerabilities_found


class DependencyChecker:
    """
    Simulates a dependency vulnerability scan.
    Replace placeholder logic with actual dependency scanning.
    """
    def run(self, system: str) -> List[Dict[str, str]]:
        # Placeholder: Simulated assessment result
        outdated_dependencies = [
            {"name": "Flask", "version": "1.2.0", "severity": "High"},
            {"name": "Requests", "version": "2.18.4", "severity": "Medium"},
            # Add more findings here...
        ]
        return outdated_dependencies


def main():
    my_assessment = VulnerabilityAssessment()
    my_assessment.add_module(NmapScanner())
    my_assessment.add_module(DependencyChecker())

    target_system = "example.com"
    assessment_results = my_assessment.assess(target_system)

    for result in assessment_results:
        print(f"\nModule: {result['module']}")
        if "error" in result:
            print(f"  Error: {result['error']}")
        elif not result["findings"]:
            print("  No findings.")
        else:
            for finding in result["findings"]:
                if "severity" in finding:
                    print(f" - {finding['name']} (Severity: {finding['severity']})")
                elif "version" in finding:
                    print(f" - {finding['name']} (Version: {finding['version']}, Severity: {finding.get('severity', 'Unknown')})")
                else:
                    print(f" - {finding}")

if __name__ == "__main__":
    main()
